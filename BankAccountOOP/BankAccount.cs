using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
 

namespace BankAccountOOP
{
    /// <summary>
    /// Author: Stephen Melben Corral
    /// Date: 12/7/2017
    /// </summary>
    class BankAccount : Account
    {
        
        public string BankPassword { get; set; }
        public int Pin { get; set; }
        public string BankAccountType { get; set; }
        public DateTime JoinDate { get; set; }

        
        /// <summary>
        /// Author: Stephen Melben Corral
        /// Task Update: 
        /// 1. Bank details are successfully inserted to SQL Server thru Stored Procedure
        /// 2. It prompts an error if the record to be deleted cannot be found on the table.
        ///    The error is generated by stored procedure.
        /// Reminder:
        /// 1. Did not need to close the connection since the using block automatically closes the connection 
        ///    thru the Dispose() from the interface "IDisposable" which is implicitly called by the using block.
        /// </summary>
        /// <param name="record"></param>
        public override void InsertDetails(List<string> record)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(Common.Constants.DataSource))
                {
                    using (SqlCommand insertCommand = new SqlCommand(Common.Constants.InsertDataOnBankAccount, conn))
                    {
                        insertCommand.CommandType = CommandType.StoredProcedure;
                        insertCommand.Connection.Open();

                        insertCommand.Parameters.Add(new SqlParameter("@Password", SqlDbType.VarChar)).Value = record[0];
                        insertCommand.Parameters.Add(new SqlParameter("@Pin", SqlDbType.Int)).Value = int.Parse(record[1]);
                        insertCommand.Parameters.Add(new SqlParameter("@BankAccountType", SqlDbType.VarChar)).Value = record[2];
                        insertCommand.Parameters.Add(new SqlParameter("@JoinDate", SqlDbType.DateTime)).Value = DateTime.Parse(record[3]);
                        
                        insertCommand.ExecuteNonQuery();
                        Console.WriteLine("Data insertion to database is successful.");
                    }
                }
            }
            catch (SqlException sql)
            {
                Console.WriteLine(sql.Message + "\nCheck if the Sql Service is running!");
            }
            
        }

        public override void UpdateDetails(string bankAccountNumber, List<string> record)
        {
            using(SqlConnection conn = new SqlConnection(Common.Constants.DataSource))
            {
                SqlDataReader dataReader = null;

                using (SqlCommand updateCommand =
                    new SqlCommand(Common.Constants.UpdateBankAccountRecordById, conn))
                    {
                        updateCommand.Connection.Open();
                        updateCommand.CommandType = CommandType.StoredProcedure;

                        updateCommand.Parameters.Add(new SqlParameter("@uPk", SqlDbType.VarChar)).Value = bankAccountNumber;
                        updateCommand.Parameters.Add(new SqlParameter("@Password", SqlDbType.VarChar)).Value = record[0];
                        updateCommand.Parameters.Add(new SqlParameter("@Pin", SqlDbType.Int)).Value = int.Parse(record[1].ToString());
                        updateCommand.Parameters.Add(new SqlParameter("@BankAccountType", SqlDbType.VarChar)).Value = record[2];
                        updateCommand.Parameters.Add(new SqlParameter("@JoinDate", SqlDbType.DateTime)).Value = DateTime.Parse(record[3]);

                        updateCommand.ExecuteReader();
                        
                    }
            }
        }

        public override void DeleteDetails(string bankAccountNumber)
        {
            try
            { 
                using(SqlConnection conn = new SqlConnection(Common.Constants.DataSource))
                {
                    using (SqlCommand deleteCommand = new SqlCommand(Common.Constants.DeleteBankRecord,conn))
                    {
                        deleteCommand.CommandType = CommandType.StoredProcedure;
                        deleteCommand.Connection.Open();

                        deleteCommand.Parameters.Add(new SqlParameter("@Pk", SqlDbType.VarChar)).Value = bankAccountNumber;
                        deleteCommand.ExecuteNonQuery();
                    }
                }
            }
            catch(SqlException sql)
            {
                Console.WriteLine(sql.Message);
                //foreign key constraint error
                
            }
        }

        public override void ViewDetails(int id)
        { 
            
        }

        
    }
}
